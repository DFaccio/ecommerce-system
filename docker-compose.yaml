services:
  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    volumes:
      - ecommerce-mongodb:/data/db
    ports:
      - 6060:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - ecommerce-network

  # Interface web para o mongo
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-interface
    restart: unless-stopped
    ports:
      - 6061:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongodb
    links:
      - mongodb
    depends_on:
      - mongodb
    networks:
      - ecommerce-network

  # PostgreSQL
  postgres:
    image: postgres:16.0
    container_name: postgres
    restart: unless-stopped
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ecommerce-postgres:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      POSTGRES_USER: ${POSTGRES_DATABASE_USERNAME}
    ports:
      - 6062:5432

  # Interface para Postgres
  pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: pgadmin
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 6063:80
    depends_on:
      - postgres
    networks:
      - ecommerce-network

  # Registro e descoberta de serviços
  server-discovery:
    image: ecommerce-registry:1.0.0
    build:
      context: ./ecommerce-registry
    container_name: ecommerce-registry
    ports:
      - 7070:7070
    restart: unless-stopped
    networks:
      - ecommerce-network

  # Gateway
  gateway:
    image: ecommerce-gateway:1.0.0
    build:
      context: ./ecommerce-gateway
    container_name: ecommerce-gateway
    ports:
      - 7071:7071
    restart: unless-stopped
    networks:
      - ecommerce-network
    environment:
      EUREKA_SERVER: ${EUREKA_SERVER}
      PRODUCT_ADDRESS: ${PRODUCT_ADDRESS}
      PAYMENT_ADDRESS: ${PAYMENT_ADDRESS}
      CART_ADDRESS: ${CART_ADDRESS}
      USER_ADDRESS: ${USER_ADDRESS}
      JWT_SERVER: ${JWT_SERVER}
    depends_on:
      - server-discovery
      - user-service

  # API de Produtos
  inventory-service:
    image: ecommerce-inventory:1.0.0
    build:
      context: ./inventory
    container_name: inventory
    expose:
      - "7072"
    restart: unless-stopped
    networks:
      - ecommerce-network
    environment:
      PROFILE: ${PROFILE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      SWAGGER_SERVER_ADDRESS: http://localhost:7071/ecommerce/inventory
    depends_on:
      - gateway
      - server-discovery
      - mongodb

  # API de usuário e criação de login
  user-service:
    image: ecommerce-user:1.0.0
    build:
      context: ./ecommerce-user
    container_name: ecommerce-user
    expose:
      - "7073"
    networks:
      - ecommerce-network
    environment:
      PROFILE: ${PROFILE}
      DATABASE_HOST: postgres
      DATABASE_NAME: users
      DATABASE_USERNAME: ${POSTGRES_DATABASE_USERNAME}
      DATABASE_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
    depends_on:
      - server-discovery
      - postgres

networks:
  ecommerce-network:

volumes:
  ecommerce-mongodb:
  ecommerce-postgres: